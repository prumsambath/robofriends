{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","_props$robot","robot","id","name","email","imageSrc","concat","react_default","a","createElement","className","alt","src","href","CardList","_ref","robots","map","components_Card","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","err","setState","Component","Header","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobot","filter","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","initialStateSearch","initialStateRobots","logger","createLogger","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunkMiddleware","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b3f31457.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = props => {\n  const { id, name, email } = props.robot;\n  let imageSrc = `https://robohash.org/${id}.png?size=200x200`;\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <div className=\"title\" />\n      <div className=\"detail\">\n        <img alt=\"robot\" src={imageSrc} />\n        <h3>{name}</h3>\n        <a href=\"#\">{email}</a>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from '../components/Card';\n\nconst CardList = ({ robots }) => {\n  return robots.map(robot => <Card key={robot.id} robot={robot} />);\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"Search Robots\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search robot\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{\n        overflowY: 'scroll',\n        border: '1px solid black',\n        height: '700px',\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor() {\n    super();\n    this.state = { hasError: false };\n  }\n\n  getDerivedStateFromError(err) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    return this.state.hasError ? (\n      <h1>Ooops. Something went wrong.</h1>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  render() {\n    return <h1 className=\"f2\">ROBOFRIENDS</h1>;\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\nimport Header from '../components/Header';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobot = robots.filter(robot =>\n      robot.name.toLowerCase().includes(searchField)\n    );\n    return isPending ? (\n      <h1 className=\"tc\">Loading...</h1>\n    ) : (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobot} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProp = state => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n});\n\nconst mapDispathToProp = dispatch => ({\n  onSearchChange: event => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => requestRobots(dispatch),\n});\n\nexport default connect(\n  mapStateToProp,\n  mapDispathToProp\n)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: '',\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: false,\n  error: '',\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, isPending: false, robots: action.payload };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, isPending: false, error: action.err };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst composeEnhancers =\n  typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n    : compose;\n\nconst enhancer = composeEnhancers(applyMiddleware(thunkMiddleware, logger));\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, enhancer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}